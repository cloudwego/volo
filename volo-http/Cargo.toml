[package]
name = "volo-http"
version = "0.4.0-rc.1"
edition.workspace = true
homepage.workspace = true
repository.workspace = true
license.workspace = true
authors.workspace = true
rust-version.workspace = true
description = "HTTP framework implementation of volo."
documentation = "https://docs.rs/volo-http"
readme = "README.md"
categories = ["asynchronous", "network-programming", "web-programming"]
keywords = ["async", "rpc", "http"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[badges]
maintenance = { status = "actively-developed" }

[dependencies]
volo = { version = "0.10", path = "../volo" }

ahash.workspace = true
bytes.workspace = true
faststr.workspace = true
futures.workspace = true
futures-util.workspace = true
http.workspace = true
http-body.workspace = true
http-body-util.workspace = true
hyper.workspace = true
hyper-util = { workspace = true, features = ["tokio"] }
itoa.workspace = true
metainfo.workspace = true
mime.workspace = true
motore.workspace = true
parking_lot.workspace = true
paste.workspace = true
pin-project.workspace = true
simdutf8.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = [
    "fs",
    "time",
    "macros",
    "rt",
    "signal",
    "parking_lot",
] }
tokio-util = { workspace = true, features = ["io"] }
tracing.workspace = true
url.workspace = true

# =====optional=====

# server optional
ipnet = { workspace = true, optional = true } # client ip
matchit = { workspace = true, optional = true } # route matching
memchr = { workspace = true, optional = true } # sse
scopeguard = { workspace = true, optional = true } # defer

# client optional
async-broadcast = { workspace = true, optional = true } # service discover
chrono = { workspace = true, optional = true } # stat
hickory-resolver = { workspace = true, optional = true } # dns resolver
mime_guess = { workspace = true, optional = true }

# serde and form, query, json
serde = { workspace = true, optional = true }
serde_urlencoded = { workspace = true, optional = true }
sonic-rs = { workspace = true, optional = true }

# cookie support
cookie = { workspace = true, optional = true, features = ["percent-encode"] }
cookie_store = { workspace = true, optional = true }

# multipart optional
multer = { workspace = true, optional = true }

# websocket optional
tungstenite = { workspace = true, optional = true }
tokio-tungstenite = { workspace = true, optional = true }

# tls optional
tokio-rustls = { workspace = true, optional = true }
tokio-native-tls = { workspace = true, optional = true }

[dev-dependencies]
async-stream.workspace = true
libc.workspace = true
serde = { workspace = true, features = ["derive"] }
reqwest = { workspace = true, features = ["multipart"] }
tokio-test.workspace = true

[features]
default = []

default-client = ["client", "http1", "http2", "json"]
default-server = ["server", "http1", "http2", "query", "form", "json", "multipart"]

full = [
    "client", "server", # core
    "http1", "http2", # protocol
    "query", "form", "json", # serde
    "tls", # https
    "cookie", "multipart", "ws", # exts
]

http1 = ["hyper/http1", "hyper-util/http1"]
http2 = ["hyper/http2", "hyper-util/http2"]

client = [
    "hyper/client",
    "dep:async-broadcast", "dep:chrono", "dep:hickory-resolver",
] # client core
server = [
    "hyper-util/server",
    "dep:ipnet", "dep:matchit", "dep:memchr", "dep:scopeguard", "dep:mime_guess",
] # server core

__serde = ["dep:serde"] # a private feature for enabling `serde` by `serde_xxx`
query = ["__serde", "dep:serde_urlencoded"]
form = ["__serde", "dep:serde_urlencoded"]
json = ["__serde", "dep:sonic-rs"]
json-utf8-lossy = ["json", "sonic-rs/utf8_lossy"] # json feature

cookie = ["dep:cookie", "dep:cookie_store"]
multipart = ["dep:multer"]
ws = ["dep:tungstenite", "dep:tokio-tungstenite"]

tls = ["rustls"]
__tls = []
rustls = ["__tls", "dep:tokio-rustls", "volo/rustls"]
native-tls = ["__tls", "dep:tokio-native-tls", "volo/native-tls"]
native-tls-vendored = ["native-tls", "volo/native-tls-vendored"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
