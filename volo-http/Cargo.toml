[package]
name = "volo-http"
version = "0.2.11"
edition.workspace = true
homepage.workspace = true
repository.workspace = true
license.workspace = true
authors.workspace = true
rust-version.workspace = true
description = "HTTP framework implementation of volo."
documentation = "https://docs.rs/volo-http"
readme = "README.md"
categories = ["asynchronous", "network-programming", "web-programming"]
keywords = ["async", "rpc", "http"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html



[badges]
maintenance = { status = "actively-developed" }

[dependencies]
volo = { version = "0.10", path = "../volo" }

ahash.workspace = true
async-broadcast.workspace = true
bytes.workspace = true
chrono.workspace = true
faststr.workspace = true
futures.workspace = true
futures-util.workspace = true
hickory-resolver.workspace = true
http.workspace = true
http-body.workspace = true
http-body-util.workspace = true
hyper.workspace = true
hyper-util = { workspace = true, features = ["tokio"] }
itoa.workspace = true
memchr.workspace = true
metainfo.workspace = true
mime.workspace = true
mime_guess.workspace = true
motore.workspace = true
parking_lot.workspace = true
paste.workspace = true
pin-project.workspace = true
scopeguard.workspace = true
simdutf8.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = [
    "fs",
    "time",
    "macros",
    "rt",
    "signal",
    "parking_lot",
] }
tokio-util = { workspace = true, features = ["io"] }
tracing.workspace = true

# =====optional=====
# server optional
matchit = { workspace = true, optional = true }

# protocol optional
tokio-tungstenite = { workspace = true, optional = true }

# tls optional
tokio-rustls = { workspace = true, optional = true }
tokio-native-tls = { workspace = true, optional = true }

# cookie support
cookie = { workspace = true, optional = true, features = ["percent-encode"] }

# serde and form, query, json
serde = { workspace = true, optional = true }
serde_urlencoded = { workspace = true, optional = true }
sonic-rs = { workspace = true, optional = true }

[dev-dependencies]
async-stream.workspace = true
libc.workspace = true
serde = { workspace = true, features = ["derive"] }
tokio-test.workspace = true

[features]
default = []

default_client = ["client", "json"]
default_server = ["server", "query", "form", "json"]

full = ["client", "server", "rustls", "cookie", "query", "form", "json", "tls", "ws"]

client = ["hyper/client", "hyper/http1"] # client core
server = ["hyper/server", "hyper/http1", "dep:matchit"] # server core

ws = ["dep:tokio-tungstenite"]

tls = ["rustls"]
__tls = []
rustls = ["__tls", "dep:tokio-rustls", "volo/rustls"]
native-tls = ["__tls", "dep:tokio-native-tls", "volo/native-tls"]
native-tls-vendored = ["native-tls", "volo/native-tls-vendored"]

cookie = ["dep:cookie"]

__serde = ["dep:serde"] # a private feature for enabling `serde` by `serde_xxx`
query = ["__serde", "dep:serde_urlencoded"]
form = ["__serde", "dep:serde_urlencoded"]
json = ["__serde", "dep:sonic-rs"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
